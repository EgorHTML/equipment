# Рабочие процессы Nginx - обычно по числу ядер CPU
worker_processes auto;

events {
    # Максимальное количество одновременных соединений на один рабочий процесс
    worker_connections 1024;
}

http {
    # Включаем стандартные MIME-типы
    include       /etc/nginx/mime.types;
    # Тип по умолчанию
    default_type  application/octet-stream;
    
    resolver 127.0.0.11 valid=10s;
    # Настройки для улучшения производительности
    sendfile        on; # Эффективная отправка файлов
    tcp_nopush      on; # Отправка заголовков и начала файла в одном пакете
    keepalive_timeout 65; # Время ожидания keep-alive соединений

    # Логирование (раскомментируйте и настройте пути при необходимости)
    # access_log /var/log/nginx/access.log;
    # error_log /var/log/nginx/error.log;

    # --- Определение upstream-серверов (наши микросервисы) ---
    # Имена здесь произвольные, но должны совпадать с proxy_pass ниже.
    # Используем имена сервисов из docker-compose.yml и их ВНУТРЕННИЕ порты.

    upstream equipment_service_backend {
        # IP-адрес или имя хоста сервиса оборудования и его порт
        # В Docker Compose это будет имя сервиса, например 'equipment-app'
        server equipment-app:3000;
    }

    upstream file_service_backend {
        server file-app:3001; # Имя сервиса File_Service в Docker Compose
    }

    upstream reports_service_backend {
        server reports-app:3002; # Имя сервиса Reports в Docker Compose
    }

    # --- Основной сервер, слушающий внешний порт (например, 80) ---
    server {
        listen 80;
        # Имя сервера (например, ваш домен или localhost для локальной разработки)
        server_name localhost;

        # Увеличиваем максимальный размер тела запроса, если загружаются большие файлы
        client_max_body_size 100M; # Пример: 100 мегабайт

        # Общие настройки для проксирования
        proxy_http_version 1.1;
        # Для поддержки WebSocket (если потребуется)
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection 'upgrade';
        # Передача реального IP клиента и протокола бэкенду
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # --- Маршрутизация по префиксам URL ---

        # Запросы, начинающиеся с /api/equipment/, перенаправляются на сервис оборудования
        location /api/equipment/ {
            # Убираем префикс /api/equipment/ перед отправкой бэкенду
            rewrite ^/api/equipment/(.*)$ /$1 break;
            proxy_pass http://equipment_service_backend; # Перенаправляем на нужный upstream
        }

        # Запросы, начинающиеся с /api/files/, перенаправляются на сервис файлов
        location /api/files/ {
            rewrite ^/api/files/(.*)$ /$1 break;
            proxy_pass http://file_service_backend;
        }

        # Запросы для отчетов и импорта/экспорта - на сервис отчетов
        location /api/reports/ {
            rewrite ^/api/reports/(.*)$ /$1 break;
            proxy_pass http://reports_service_backend;
        }
        location /api/import-export/ {
             rewrite ^/api/import-export/(.*)$ /$1 break;
             proxy_pass http://reports_service_backend;
        }

        # Маршрут для Swagger UI сервиса оборудования (пример)
        # Клиент будет заходить на http://localhost/api-docs/
        location /api-docs/ {
            # Убедитесь, что Swagger UI в equipment-app настроен на путь /swagger
            proxy_pass http://equipment_service_backend/swagger/;
            # Дополнительные заголовки могут понадобиться для корректной работы UI за прокси
             proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
             proxy_redirect off; # Может понадобиться, чтобы UI не пытался перенаправить не туда
        }
        # Отдельно проксируем сам JSON спецификации
         location /api-docs-json {
             proxy_pass http://equipment_service_backend/swagger-json; # Путь к JSON спецификации
             proxy_set_header Host $host;
             # ... другие заголовки ...
         }


        # Корневой путь - можно вернуть заглушку или перенаправить на документацию
        location / {
            return 200 'API Gateway Ready';
            add_header Content-Type text/plain;
            # Или перенаправление на Swagger UI:
            # return 301 /api-docs/;
        }

        # Обработка ошибок (опционально)
        # error_page 500 502 503 504 /50x.html;
        # location = /50x.html {
        #     root /usr/share/nginx/html;
        # }
    }

    # Можно добавить еще один блок server для обработки HTTPS на порту 443
    # server {
    #    listen 443 ssl;
    #    server_name ваш_домен.com;
    #    ssl_certificate /etc/nginx/certs/your_cert.crt;
    #    ssl_certificate_key /etc/nginx/certs/your_key.key;
    #    # ... остальные настройки SSL ...
    #
    #    # location блоки будут такими же, как для порта 80
    # }
}