services:
  equipment-app:
    build: ./Equipment
    container_name: equipment_app
    ports:
      - "3000:3000"
    depends_on:
      postgres-eq: 
        condition: service_healthy 
      rabbitmq:
        condition: service_started 
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      POSTGRES_HOST: postgres-eq
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${EQUIPMENT_DB_USER:-eq_user}
      POSTGRES_PASSWORD: ${EQUIPMENT_DB_PASSWORD:-eq_password}
      POSTGRES_DB: ${EQUIPMENT_DB_NAME:-equipment_main_db}

      RABBITMQ_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672

      FILE_SERVICE_URL: http://file-app:3001
    volumes:
      - ./Equipment:/usr/src/app 
      - /usr/src/app/node_modules 
    networks:
      - equipment_network

  file-app:
    build: ./File_Service
    container_name: file_app
    ports:
      - "3001:3001"
    depends_on:
      postgres-file:
        condition: service_healthy
      minio:
        condition: service_started 
      rabbitmq:
        condition: service_started
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001

      POSTGRES_HOST: postgres-file
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${FILE_DB_USER:-file_user}
      POSTGRES_PASSWORD: ${FILE_DB_PASSWORD:-file_password}
      POSTGRES_DB: ${FILE_DB_NAME:-files_db}

      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MINIO_USE_SSL: ${MINIO_USE_SSL:-false}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-equipment-files}

      RABBITMQ_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672
    volumes:
      - ./File_Service:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - equipment_network

  reports-app:
    build: ./Reports
    container_name: reports_app
    ports:
      - "3002:3002"
    depends_on:
      - postgres-eq
      - rabbitmq
      - minio
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3002

      RABBITMQ_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672
      RABBITMQ_REPORT_QUEUE: ${RABBITMQ_REPORT_QUEUE:-report_generation_queue}
      RABBITMQ_IMPORT_QUEUE: ${RABBITMQ_IMPORT_QUEUE:-equipment_import_queue}
      RABBITMQ_EXPORT_QUEUE: ${RABBITMQ_EXPORT_QUEUE:-equipment_export_queue}

      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000

      EQUIPMENT_SERVICE_URL: http://equipment-app:3000
      FILE_SERVICE_URL: http://file-app:3001
    volumes:
      - ./Reports:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - equipment_network

  nginx:
    image: nginx:1.25-alpine
    container_name: equipment_nginx_gateway
    ports:
      - "80:80"
      # - "443:443" # Если будет HTTPS
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro # Маппим конфигурационный файл (read-only)
      # - ./certs:/etc/nginx/certs:ro # Если будет HTTPS
    depends_on:
      - equipment-app
      - file-app
      - reports-app
    networks:
      - equipment_network

  # --- Базы данных ---
  postgres-eq:
    image: postgres:15-alpine
    container_name: equipment_postgres_db
    environment:
      POSTGRES_USER: ${EQUIPMENT_DB_USER:-eq_user}
      POSTGRES_PASSWORD: ${EQUIPMENT_DB_PASSWORD:-eq_password}
      POSTGRES_DB: ${EQUIPMENT_DB_NAME:-equipment_main_db}
    volumes:
      - postgres_eq_data:/var/lib/postgresql/data
      - ./Equipment/init-db.sql:/docker-entrypoint-initdb.d/init.sql # Скрипт инициализации для этой БД
    networks:
      - equipment_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${EQUIPMENT_DB_USER:-eq_user} -d ${EQUIPMENT_DB_NAME:-equipment_main_db}"]
      interval: 5s  
      timeout: 5s   
      retries: 5    

  postgres-file:
    image: postgres:15-alpine
    container_name: file_postgres_db
    environment:
      POSTGRES_USER: ${FILE_DB_USER:-file_user}
      POSTGRES_PASSWORD: ${FILE_DB_PASSWORD:-file_password}
      POSTGRES_DB: ${FILE_DB_NAME:-files_db}
    volumes:
      - postgres_file_data:/var/lib/postgresql/data
      - ./File_Service/init-db.sql:/docker-entrypoint-initdb.d/init.sql # Скрипт инициализации
    networks:
      - equipment_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${FILE_DB_USER:-file_user} -d ${FILE_DB_NAME:-files_db}"]
      interval: 5s
      timeout: 5s
      retries: 5
    # restart: unless-stopped

  # --- MinIO ---
  minio:
    image: minio/minio:latest
    container_name: equipment_minio_s3
    ports:
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - equipment_network
    # restart: unless-stopped

  # --- RabbitMQ ---
  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    container_name: equipment_rabbitmq
    ports:
      - "15672:15672" # Публикуем UI RabbitMQ
      # - "5672:5672" # Порт AMQP обычно не публикуется наружу
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - equipment_network
    # restart: unless-stopped

volumes:
  postgres_eq_data:
  postgres_file_data:
  minio_data:
  rabbitmq_data:

networks:
  equipment_network:
    driver: bridge
